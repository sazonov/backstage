plugins {
	id 'java-library'
	id "io.freefair.lombok" version "$lombokVersion"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'

delombok {
	enabled = false
}

jar {
	enabled = true
}

bootJar {
	enabled = false
}

dependencies {
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	compileOnly project(":app")

	compileOnly "org.springframework.boot:spring-boot-starter"
	compileOnly "org.springframework.boot:spring-boot-starter-validation"
	compileOnly "org.springframework.boot:spring-boot-starter-web"
	compileOnly "org.springframework.boot:spring-boot-starter-activemq"
	compileOnly ("org.springframework.data:spring-data-jpa") {
		exclude(group: "org.hibernate")
	}
	compileOnly "org.springframework.cloud:spring-cloud-starter-openfeign:$springCloudVersion"
	compileOnly "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:$springCloudVersion"

	api "org.apache.poi:poi:$apachePOIVersion"
	api "org.apache.poi:poi-ooxml:$apachePOIVersion"

	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.boot:spring-boot-starter-actuator"
	testImplementation "org.springframework.boot:spring-boot-starter-validation"
	testImplementation "org.springframework.boot:spring-boot-starter-web"
	testImplementation "org.springframework.boot:spring-boot-starter-activemq"
	testImplementation ("org.springframework.data:spring-data-jpa") {
		exclude(group: "org.hibernate")
	}

	testImplementation project(":app")

	testImplementation "org.apache.activemq:activemq-kahadb-store"
	testImplementation "org.flywaydb:flyway-core"
	testImplementation "com.zaxxer:HikariCP"
	testImplementation "org.postgresql:postgresql"
	testImplementation "net.sf.ehcache:ehcache"

	testImplementation "org.testcontainers:testcontainers:$testContainersVersion"
	testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
	testImplementation "org.testcontainers:postgresql:$testContainersVersion"
}

test {
	useJUnitPlatform()
}

javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
		options.encoding('UTF-8')
	}
}

tasks.register('sourceJar', Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
	archiveClassifier = 'javadoc'
	from javadoc
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = project.group
			artifactId = project.name
			version = project.version

			from components.java
			artifact sourceJar
			artifact javadocJar
		}
	}

	repositories {
		maven {
			url 'https://nexus.proitr.ru/repository/maven-proit/'
			credentials {
				username nexusLogin
				password nexusPassword
			}
		}
	}
}